# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'popup_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5.QtCore import QObject
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from popup_window import Ui_popup_window
import cv2

class Ui_popup_window(object):
    def setupUi(self, popup_window, src):
        popup_window.setObjectName("popup_window")
        popup_window.resize(1080, 720)
        self.centralwidget = QtWidgets.QWidget(popup_window)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 1080, 720))
        self.label.setObjectName("label")
        popup_window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(popup_window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1080, 22))
        self.menubar.setObjectName("menubar")
        popup_window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(popup_window)
        self.statusbar.setObjectName("statusbar")
        popup_window.setStatusBar(self.statusbar)

        self.retranslateUi(popup_window)
        QtCore.QMetaObject.connectSlotsByName(popup_window)

        self.Worker = Worker(src)
        self.Worker.start()
        self.Worker.ImageUpdate.connect(self.ImageUpdate_Worker)

    def ImageUpdate_Worker(self, Image):
        self.label.setPixmap(QPixmap.fromImage(Image))

    def retranslateUi(self, popup_window):
        _translate = QtCore.QCoreApplication.translate
        popup_window.setWindowTitle(_translate("popup_window", "MainWindow"))
        self.label.setText(_translate("popup_window", "TextLabel"))

class Worker(QThread):
    ImageUpdate = pyqtSignal(QImage)
    def __init__(self, url) -> None:
        super().__init__()
        self.rtsp_url = url
        # self.ImageUpdate = pyqtSignal(QImage)

    def run(self):
        self.ThreadActive = True
        Capture = cv2.VideoCapture(self.rtsp_url)
        while self.ThreadActive:
            ret, frame = Capture.read()
            if ret:
                Image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                FlippedImage = cv2.flip(Image, 1)
                ConvertToQtFormat = QImage(FlippedImage.data, FlippedImage.shape[1], FlippedImage.shape[0], QImage.Format_RGB888)
                Pic = ConvertToQtFormat.scaled(400, 400, Qt.KeepAspectRatio)
                self.ImageUpdate.emit(Pic)

    def stop(self):
        self.ThreadActive = False
        self.quit()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    popup_window = QtWidgets.QMainWindow()
    ui = Ui_popup_window()
    ui.setupUi(popup_window)
    popup_window.show()
    sys.exit(app.exec_())
